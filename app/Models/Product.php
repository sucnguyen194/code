<?php

namespace App\Models;

use App\Enums\ActiveDisable;
use App\Enums\ProductType;
use App\Enums\TakeItem;
use Illuminate\Database\Eloquent\Model;
use Illuminate\Support\Facades\Auth;
use Spatie\Activitylog\Traits\LogsActivity;

class Product extends Model
{
    use LogsActivity;

    protected static $logUnguarded = true;
    protected static $submitEmptyLogs = false;
    protected static $logOnlyDirty = true;

    protected $guarded = ['id'];

    protected $casts = [
        'options' => 'array',
        'photo' => 'array'
    ];

    public function comments(){
        return $this->morphMany(Comment::class,'comment');
    }

    public function translations(){
        return $this->hasMany(Translation::class)->whereIn('locale', Language::pluck('value')->toArray());;
    }

    public function translation(){
        return $this->hasOne(Translation::class)->whereLocale(session('lang'));
    }

    public function category(){
        return  $this->belongsTo(Category::class);
    }
    public function categories(){
        return $this->belongsToMany(Category::class);
    }
    public function attributes(){
        return $this->belongsToMany(Attribute::class);
    }

    public function user(){
        return  $this->belongsTo(User::class);
    }

    public function admin(){
        return  $this->belongsTo(Admin::class);
    }

    public function getImagesAttribute(){
        $image = $this->image;
        if($this->photo)
            $image = $this->photo[0];
        return $image;
    }
    public function getThumbAttribute(){
        return resize_image($this->images, setting('site.product.size'));
    }

    public function getPercentAttribute(){
        if($this->price == 0) return;

        $percent = ($this->price_sale - $this->price) / $this->price * 100;

        return round($percent,2);
    }

    public function getSlugAttribute(){
        if($this->translation)
            return '#';

        return route('slug', $this->translation->slug);
    }

    public function getNameAttribute(){
        return optional($this->translation)->name;
    }

    public function getDescriptionAttribute(){
        return optional($this->translation)->description;
    }

    public function getContentAttribute(){
        return optional($this->translation)->content;
    }

    public function getRouteAttribute(){
        switch ($this->type){
            case ProductType::product:
                return route('admin.products.index');
                break;
            default:
                return;
        }
    }

    public function scopeOfCategory($q, $category){
        return $q->whereCategoryId($category)->orWhere(function($q) use ($category){
            $q->whereHas('categories',function($q) use ($category){
                $q->whereCategoryId($category);
            });
        });
    }

    public function scopeOfTake($q, $take){
        if($take == TakeItem::index)
            return $q->take(setting('site.product.index'));
        if($take == TakeItem::category)
            return $q->take(setting('site.product.category'));
        if($take == TakeItem::replated)
            return $q->take(setting('site.product.related'));

        return $q->take(6);
    }

    public function scopeOfType($q, $type){
        return $q->whereType($type)->with('translation')->whereHas('translation')->public();
    }

    public function scopeSort($q){
        return $q->oldest('sort')->latest();
    }

    public function scopePublic($q){
        $q->wherePublic(ActiveDisable::active);
    }
    public function scopeStatus($q){
        $q->whereStatus(ActiveDisable::active);
    }

    public static function boot()
    {
        parent::boot(); // TODO: Change the autogenerated stub

        static::saving(function($product){
            $product->admin_id = $product->admin_id ?? Auth::id();
        });

        static::deleting(function($product){
            $product->comments()->delete();
        });
    }

}
