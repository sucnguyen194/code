<?php

namespace App\Models;

use App\Enums\ActiveDisable;
use App\Enums\ProductType;
use Illuminate\Database\Eloquent\Model;
use Illuminate\Support\Facades\Auth;

class Product extends Model
{
    protected $guarded = ['id'];

    protected $casts = [
        'options' => 'array',
        'photo' => 'array'
    ];

    public function comments(){
        return $this->morphMany(Comment::class,'comment');
    }

    public function translations(){
        return $this->hasMany(Translation::class);
    }

    public function translation(){
        return $this->hasOne(Translation::class);
    }

    public function scopeWithTranslation($q){
        $q->with('translation', function ($q){
            $q->locale();
        });
    }

    public function category(){
        return  $this->belongsTo(Category::class);
    }
    public function categories(){
        return $this->belongsToMany(Category::class);
    }
    public function attributes(){
        return $this->belongsToMany(Attribute::class);
    }

    public function user(){
        return  $this->belongsTo(User::class);
    }

    public function admin(){
        return  $this->belongsTo(Admin::class);
    }

    public function getThumbAttribute(){

        $image = $this->image;

        if($this->photo)
            $image = $this->photo[0];

        return resize_image($image);
    }

    public function getPercentAttribute(){
        if($this->price == 0) return;

        $percent = ($this->price_sale - $this->price) / $this->price * 100;

        return round($percent,2);
    }

    public function getSlugAttribute(){
        return route('slug', $this->translation->slug);
    }

    public function getRouteAttribute(){
        switch ($this->type){
            case ProductType::product:
                return route('admin.products.index');
                break;
            default:
                return;
        }
    }

    public function scopePublic($q){
        $q->wherePublic(ActiveDisable::active);
    }
    public function scopeStatus($q){
        $q->whereStatus(ActiveDisable::active);
    }

    public static function boot()
    {
        parent::boot(); // TODO: Change the autogenerated stub

        static::saving(function($product){
            $product->admin_id = $product->admin_id ?? Auth::id();
        });

        static::deleting(function($product){
            $product->comments()->delete();
        });
    }

}
