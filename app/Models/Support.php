<?php

namespace App\Models;

use App\Enums\ActiveDisable;
use App\Enums\SystemType;
use Illuminate\Database\Eloquent\Model;
use Spatie\Activitylog\Traits\LogsActivity;

class Support extends Model
{

    use LogsActivity;

    protected static $logUnguarded = true;
    protected static $submitEmptyLogs = false;
    protected static $logOnlyDirty = true;

    protected $guarded = ['id'];

    public function translations(){
        return $this->hasMany(SupportTranslation::class)->whereIn('locale', Language::pluck('value')->toArray());
    }

    public function translation(){
        return $this->hasOne(SupportTranslation::class)->whereLocale(session('lang'));
    }

    public function admin(){
        return $this->belongsTo(Admin::class);
    }

    public function getRouteAttribute(){
        switch ($this->type){
            case SystemType::CUSTOMER:
                return route('admin.supports.customers.index');
                break;
            case SystemType::SUPPORT:
                return route('admin.supports.index');
                break;
        }
    }

    public function getNameAttribute(){
        return optional($this->translation)->name;
    }

    public function getDescriptionAttribute(){
        return optional($this->translation)->description;
    }

    public function scopeOfType($q, $type){
        return $q->with('translation')->whereType($type)->public()->oldest('sort')->latest();
    }

    public function scopePublic($q){
        $q->wherePublic(ActiveDisable::active);
    }

    public function scopeStatus($q){
        $q->whereStatus(ActiveDisable::active);
    }

    protected static function boot()
    {
        parent::boot(); // TODO: Change the autogenerated stub

        self::saving(function($support){
            $support->admin_id = $support->admin_id ? $support->admin_id : auth()->id();
        });
    }
}
