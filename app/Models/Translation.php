<?php

namespace App\Models;

use App\Enums\ActiveDisable;
use Illuminate\Database\Eloquent\Factories\HasFactory;
use Illuminate\Database\Eloquent\Model;
use Illuminate\Support\Str;

class Translation extends Model
{
    use HasFactory;

    protected $guarded = [];

    public $timestamps = false;

    public function comments(){
        return $this->hasMany(Comment::class);
    }

    public function tags(){
        return $this->hasMany(Tags::class);
    }

    public function post(){
       return $this->belongsTo(Post::class);
    }

    public function product(){
       return  $this->belongsTo(Product::class);
    }

    public function category(){
        return  $this->belongsTo(Category::class);
    }

    public function language(){
        return $this->belongsTo(Language::class,'locale','value');
    }

    public function getItemAttribute(){
        if($this->post_id)
            return $this->post;

        if($this->product_id)
            return  $this->product;
    }

    public function scopeLocale($q){
        return $q->whereLocale(session('lang'));
    }

    protected static function boot()
    {
        parent::boot(); // TODO: Change the autogenerated stub

         static::saving(function($translation){

             if($translation->menu_id
                 || $translation->photo_id
                 || $translation->support_id
                 || $translation->attribute_id) return;

             $translation->title_seo = $translation->title_seo ?? $translation->name;
             $translation->description_seo = $translation->description_seo ?? $translation->name;

             if(!$translation->tag) return;
             $translation->tags()->delete();

             foreach(explode(',', $translation->tag) as $tag){
                 $slug = Str::slug($tag);
                 $translation->tags()->create(['name'=> $tag, 'slug' => $slug]);
             }
         });


    }
}
